services:
  nginx:
    image: nginx:1.23.3
    container_name: nginx
    restart: always
    links:
      - "backend"
      - "nodered"
      - "adminer"
    depends_on:
      backend:
        condition: service_started
      nodered:
        condition: service_started
      adminer:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  certbot:
    image: certbot/certbot
    container_name: certbot
    depends_on:
      nginx:
        condition: service_healthy
    volumes:
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: >
      /bin/sh -c "
        if [ ! -f /etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem ]; then
          echo 'Certificado no encontrado. Creando uno nuevo...';
          certbot certonly --webroot -w /var/www/certbot --agree-tos --no-eff-email --email gguillaumet011@alumnos.iua.edu.ar -d lpn2.crabdance.com;
        else
          echo 'Certificado ya existe. Saltando creación...';
        fi;
        trap exit TERM;
        while :; do
          echo 'Verificando renovación del certificado...';
          certbot renew --webroot -w /var/www/certbot;
          sleep 30d & wait $${!};
        done;"
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  #certbot sidecar container
  cert-exporter:
    image: alpine:latest
    container_name: cert-exporter
    depends_on:
      certbot:
        condition: service_healthy
    volumes:
      - certbot-conf:/etc/letsencrypt:ro
      - ./certs:/exported-certs
    entrypoint: >
      /bin/sh -c "
        mkdir -p /exported-certs/lpn2.crabdance.com;

        # Usar symlinks desde /etc/letsencrypt/live (que siempre apuntan al archivo más nuevo)
        cp /etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem /exported-certs/lpn2.crabdance.com/fullchain.pem;
        cp /etc/letsencrypt/live/lpn2.crabdance.com/privkey.pem /exported-certs/lpn2.crabdance.com/privkey.pem;

        chmod 644 /exported-certs/lpn2.crabdance.com/*.pem;
        chmod 755 /exported-certs /exported-certs/lpn2.crabdance.com;
        chown -R 1000:1000 /exported-certs;

        trap exit TERM;
        while :; do
          echo 'Actualizando certificados exportados...';

          cp /etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem /exported-certs/lpn2.crabdance.com/fullchain.pem;
          cp /etc/letsencrypt/live/lpn2.crabdance.com/privkey.pem /exported-certs/lpn2.crabdance.com/privkey.pem;

          chmod 644 /exported-certs/lpn2.crabdance.com/*.pem;
          chmod 755 /exported-certs /exported-certs/lpn2.crabdance.com;
          chown -R 1000:1000 /exported-certs;

          sleep 30d & wait $${!};
        done;
      "
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/exported-certs/lpn2.crabdance.com/fullchain.pem",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  backend:
    image: simonll4/fuelops-backend-iw3:latest
    container_name: backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=mysqlprod
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=iw3

  mysql:
    image: mysql:latest
    container_name: mysql
    restart: always
    environment:
      - TZ=America/Argentina/Buenos_Aires
      - MYSQL_DATABASE=iw3
      - MYSQL_ROOT_PASSWORD=123
    command: --bind-address=0.0.0.0
    expose:
      - 3306
    volumes:
      - mysql-data-iw3:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-p123"]
      interval: 30s
      timeout: 10s
      retries: 4

  adminer:
    image: adminer:latest
    container_name: adminer
    restart: always
    environment:
      - TZ=America/Argentina/Buenos_Aires
    expose:
      - "8080"

  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    restart: always
    expose:
      - "1880"
    volumes:
      - ./nodered-data:/data

  telegraf:
    image: telegraf:1.34.1-alpine
    container_name: telegraf
    hostname: lpn2
    restart: always
    user: "telegraf:999"
    depends_on:
      nginx:
        condition: service_started
      backend:
        condition: service_started
      mysql:
        condition: service_started
      nodered:
        condition: service_started
      adminer:
        condition: service_started
    env_file:
      - .env
    environment:
      - INFLUXDB_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/hostfs:ro

volumes:
  certbot-conf:
  certbot-www:
  mysql-data-iw3:
