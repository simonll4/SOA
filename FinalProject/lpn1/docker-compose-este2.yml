services:
  nginx:
    image: nginx:1.23.3
    container_name: nginx
    restart: always
    links:
      - keycloak
      - influxdb2
    depends_on:
      keycloak:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - internal

  certbot:
    image: certbot/certbot
    container_name: certbot
    depends_on:
      nginx:
        condition: service_healthy
    volumes:
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: >
      /bin/sh -c "
        if [ ! -f /etc/letsencrypt/live/lpn1.crabdance.com/fullchain.pem ]; then
          echo 'Certificado no encontrado. Creando uno nuevo...';
          certbot certonly --webroot -w /var/www/certbot --agree-tos --no-eff-email --email gguillaumet011@alumnos.iua.edu.ar -d lpn1.crabdance.com -d influxdb.lpn1.crabdance.com -d keycloak.lpn1.crabdance.com;
        else
          echo 'Certificado ya existe. Saltando creación...';
        fi;
        trap exit TERM;
        while :; do
          echo 'Verificando renovación del certificado...';
          certbot renew --webroot -w /var/www/certbot;
          sleep 30d & wait $${!};
        done;"
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/etc/letsencrypt/live/lpn1.crabdance.com/fullchain.pem",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - internal

  cert-exporter:
    image: alpine:latest
    container_name: cert-exporter
    depends_on:
      certbot:
        condition: service_healthy
    volumes:
      - certbot-conf:/etc/letsencrypt:ro
      - ./certs:/exported-certs
    entrypoint: >
      /bin/sh -c "
        mkdir -p /exported-certs/lpn1.crabdance.com;
        cp /etc/letsencrypt/live/lpn1.crabdance.com/fullchain.pem /exported-certs/lpn1.crabdance.com/fullchain.pem;
        cp /etc/letsencrypt/live/lpn1.crabdance.com/privkey.pem /exported-certs/lpn1.crabdance.com/privkey.pem;
        chmod 644 /exported-certs/lpn1.crabdance.com/*.pem;
        chmod 755 /exported-certs /exported-certs/lpn1.crabdance.com;
        chown -R 1000:1000 /exported-certs;
        trap exit TERM;
        while :; do
          echo 'Actualizando certificados exportados...';
          cp /etc/letsencrypt/live/lpn1.crabdance.com/fullchain.pem /exported-certs/lpn1.crabdance.com/fullchain.pem;
          cp /etc/letsencrypt/live/lpn1.crabdance.com/privkey.pem /exported-certs/lpn1.crabdance.com/privkey.pem;
          chmod 644 /exported-certs/lpn1.crabdance.com/*.pem;
          chmod 755 /exported-certs /exported-certs/lpn1.crabdance.com;
          chown -R 1000:1000 /exported-certs;
          sleep 30d & wait $${!};
        done;"
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/exported-certs/lpn1.crabdance.com/fullchain.pem",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  influxdb2:
    image: influxdb:2.7-alpine
    container_name: influxdb2
    restart: always
    env_file:
      - .env
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      TZ: ${TZ}
    volumes:
      - influxdb2-data:/var/lib/influxdb2
      - influxdb2-config:/etc/influxdb2
    expose:
      - "8086"
    healthcheck:
      test:
        [
          "CMD",
          "influx",
          "ping",
          "--host",
          "http://localhost:8086",
          "--http-debug",
        ]
      interval: 20s
      timeout: 8s
      retries: 3
      start_period: 40s
    networks:
      - internal

  keycloak-postgres:
    image: postgres:latest
    container_name: keycloak-postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    restart: always
    command: ["start"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME_STRICT_HTTPS: true
      KC_HTTP_ENABLED: true
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      KC_PROXY_HEADERS: xforwarded
      KC_HTTP_RELATIVE_PATH: /
      KC_HEALTH_ENABLED: true
    expose:
      - "8080"
    depends_on:
      keycloak-postgres:
        condition: service_started
    networks:
      - internal


  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    restart: always
    environment:
      OAUTH2_PROXY_PROVIDER: keycloak-oidc
      OAUTH2_PROXY_CLIENT_ID: influx
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_UPSTREAMS: "http://influxdb2:8086"
      OAUTH2_PROXY_REDIRECT_URL: "https://influxdb.lpn1.crabdance.com/oauth2/callback"
      OAUTH2_PROXY_OIDC_ISSUER_URL: "https://keycloak.lpn1.crabdance.com/realms/SOA-2025"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      OAUTH2_PROXY_WHITELIST_DOMAINS: "lpn1.crabdance.com,influxdb.lpn1.crabdance.com"
      OAUTH2_PROXY_COOKIE_DOMAIN: "lpn1.crabdance.com"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_PASS_HOST_HEADER: "true"
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: "true"
      OAUTH2_PROXY_COOKIE_SECURE: "true"
      OAUTH2_PROXY_COOKIE_HTTPONLY: "true"
      OAUTH2_PROXY_COOKIE_REFRESH: "1h"
      OAUTH2_PROXY_OIDC_SCOPES: "openid email profile"
      OAUTH2_PROXY_ALLOWED_REDIRECT_DOMAINS: "influxdb.lpn1.crabdance.com"
      OAUTH2_PROXY_OIDC_EXTRA_SCOPES: "groups"
      OAUTH2_PROXY_OIDC_GROUPS_CLAIM: "groups"
      OAUTH2_PROXY_ALLOWED_GROUPS: "admin"
      # AGREGADO: Estas configuraciones ayudan con la autenticación
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_SET_BASIC_AUTH: "false"
      OAUTH2_PROXY_SKIP_AUTH_REGEX: "^/health.*"
    expose:
      - "4180"
    depends_on:
      - keycloak
    extra_hosts:
      - "keycloak.lpn1.crabdance.com:143.0.100.213"
    networks:
      - internal

volumes:
  certbot-conf:
  certbot-www:
  influxdb2-data:
  influxdb2-config:
  postgres_data:

networks:
  internal:
    driver: bridge