services:
  nginx:
    image: nginx:1.23.3
    container_name: nginx
    restart: always
    links:
      - nodered
      - mqtt_proxy_service
    depends_on:
      nodered:
        condition: service_started
      mqtt_proxy_service:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - internal


  certbot:
    image: certbot/certbot
    container_name: certbot
    depends_on:
      nginx:
        condition: service_healthy
    volumes:
      - certbot-conf:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    entrypoint: >
      /bin/sh -c "
        if [ ! -f /etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem ]; then
          echo 'Certificado no encontrado. Creando uno nuevo...';
          certbot certonly --webroot -w /var/www/certbot --agree-tos --email gguillaumet011@alumnos.iua.edu.ar --server https://acme.zerossl.com/v2/DV90 --eab-kid ${ZEROSSL_EAB_KID} --eab-hmac-key ${ZEROSSL_EAB_HMAC} -d lpn2.crabdance.com -d nodered.lpn2.crabdance.com -d app.lpn2.crabdance.com;
        else
          echo 'Certificado ya existe. Saltando creación...';
        fi;
        trap exit TERM;
        while :; do
          echo 'Verificando renovación del certificado...';
          certbot renew --server https://acme.zerossl.com/v2/DV90 --webroot -w /var/www/certbot;
          sleep 30d & wait $${!};
        done;"
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  #certbot sidecar container
  cert-exporter:
    image: alpine:latest
    container_name: cert-exporter
    depends_on:
      certbot:
        condition: service_healthy
    volumes:
      - certbot-conf:/etc/letsencrypt:ro
      - ./certs:/exported-certs
    entrypoint: >
      /bin/sh -c "
        mkdir -p /exported-certs/lpn2.crabdance.com;

        # Usar symlinks desde /etc/letsencrypt/live (que siempre apuntan al archivo más nuevo)
        cp /etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem /exported-certs/lpn2.crabdance.com/fullchain.pem;
        cp /etc/letsencrypt/live/lpn2.crabdance.com/privkey.pem /exported-certs/lpn2.crabdance.com/privkey.pem;

        chmod 644 /exported-certs/lpn2.crabdance.com/*.pem;
        chmod 755 /exported-certs /exported-certs/lpn2.crabdance.com;
        chown -R 1000:1000 /exported-certs;

        trap exit TERM;
        while :; do
          echo 'Actualizando certificados exportados...';

          cp /etc/letsencrypt/live/lpn2.crabdance.com/fullchain.pem /exported-certs/lpn2.crabdance.com/fullchain.pem;
          cp /etc/letsencrypt/live/lpn2.crabdance.com/privkey.pem /exported-certs/lpn2.crabdance.com/privkey.pem;

          chmod 644 /exported-certs/lpn2.crabdance.com/*.pem;
          chmod 755 /exported-certs /exported-certs/lpn2.crabdance.com;
          chown -R 1000:1000 /exported-certs;

          sleep 30d & wait $${!};
        done;
      "
    healthcheck:
      test:
        [
          "CMD",
          "test",
          "-f",
          "/exported-certs/lpn2.crabdance.com/fullchain.pem",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nodered:
    image: nodered/node-red:latest
    container_name: nodered
    restart: always
    expose:
      - "1880"
    volumes:
      - ./nodered-data:/data
    networks:
      - internal
    

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    restart: always
    environment:
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_CLIENT_ID: nodered
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_UPSTREAMS: "http://nodered:1880"
      OAUTH2_PROXY_REDIRECT_URL: "https://nodered.lpn2.crabdance.com/oauth2/callback"
      OAUTH2_PROXY_OIDC_ISSUER_URL: "https://keycloak.lpn1.crabdance.com/realms/SOA-2025"
      OAUTH2_PROXY_COOKIE_SECURE: "true"
      OAUTH2_PROXY_COOKIE_SAMESITE: "lax"
      OAUTH2_PROXY_HTTP_ADDRESS: "0.0.0.0:4180"
      OAUTH2_PROXY_SKIP_PROVIDER_BUTTON: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: "true"
      OAUTH2_PROXY_ALLOWED_GROUPS: "nodered-admin,nodered-editor,nodered-viewer"
      OAUTH2_PROXY_OIDC_GROUPS_CLAIM: "roles"
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      OAUTH2_PROXY_WHITELIST_DOMAINS: "nodered.lpn2.crabdance.com"
      OAUTH2_PROXY_ALLOWED_REDIRECT_DOMAINS: "nodered.lpn2.crabdance.com"
      OAUTH2_PROXY_LOG_LEVEL: "debug"
    expose:
      - "4180"
    networks:
      - internal

  mqtt_proxy_service:
    image: simonll4/mqtt_proxy_service:1.1
    container_name: mqtt_proxy_service
    expose:
      - "5002"
    env_file:
      - .env
    restart: always
    networks:
      - internal

  mosquitto-SOA:
    image: eclipse-mosquitto:latest
    container_name: mosquitto-SOA
    restart: always
    volumes:
      - ./mosquitto/config:/mosquitto/config
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    network_mode: host

networks:
  internal:
    driver: bridge

volumes:
  certbot-conf:
  certbot-www: