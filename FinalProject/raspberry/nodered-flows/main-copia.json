[
    {
        "id": "f8bcc2348cc2da98",
        "type": "tab",
        "label": "main-flow",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "0bd15aec9c835b4a",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "Validate config",
        "func": "let config = global.get(\"config\");\nlet containers = msg.containers;\n\n// Convertir array en objeto con clave por ID\nlet containerMap = {};\nfor (let c of containers) {\n    containerMap[c.id] = c;\n}\n\n// Reemplazar containers en msg\nmsg.containers = containerMap;\n\n// Validaciones\nif (!config.id) {\n    node.error(\"Falta el campo 'id'\", msg);\n    return null;\n}\n\n// if (config.action !== 0 && config.action !== 1) {\n//     node.error(\"El campo 'action' debe ser 0 (vaciado) o 1 (llenado)\", msg);\n//     return null;\n// }\n\n// if (typeof config.preset !== \"number\" || config.preset <= 0) {\n//     node.error(\"El campo 'preset' debe ser un número positivo\", msg);\n//     return null;\n// }\n\nif (!msg.containers.hasOwnProperty(config.id)) {\n    node.error(`El ID '${config.id}' no existe en containers`, msg);\n    return null;\n}\n\n// Guardar contenedor coincidente en variable global\nglobal.set(\"container\", msg.containers[config.id]);\n\nmsg.validatedConfig = config;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 100,
        "wires": [
            [
                "0ad1c6c9a825db2a",
                "6c16428ebec17b7b"
            ]
        ]
    },
    {
        "id": "92e4a7fb71d263be",
        "type": "file in",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "filename": "/home/simonll4/raspberry/data/containers.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 400,
        "y": 100,
        "wires": [
            [
                "9a628ef2b00934e7"
            ]
        ]
    },
    {
        "id": "9a628ef2b00934e7",
        "type": "json",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "9c4603653d676b20"
            ]
        ]
    },
    {
        "id": "0ad1c6c9a825db2a",
        "type": "link out",
        "z": "f8bcc2348cc2da98",
        "name": "Valid config",
        "mode": "link",
        "links": [
            "8cfd423e38084cea"
        ],
        "x": 1195,
        "y": 100,
        "wires": []
    },
    {
        "id": "9c4603653d676b20",
        "type": "change",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "containers",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 100,
        "wires": [
            [
                "0bd15aec9c835b4a"
            ]
        ]
    },
    {
        "id": "8cfd423e38084cea",
        "type": "link in",
        "z": "f8bcc2348cc2da98",
        "name": "link in 1",
        "links": [
            "0ad1c6c9a825db2a"
        ],
        "x": 45,
        "y": 260,
        "wires": [
            [
                "2fabe9c6227edaff"
            ]
        ]
    },
    {
        "id": "9ca5e92782927aa2",
        "type": "e-mail",
        "z": "f8bcc2348cc2da98",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "simon.llamosas44@gmail.com,matiicarrizo678@gmail.com",
        "dname": "alarms-emails",
        "x": 1120,
        "y": 400,
        "wires": []
    },
    {
        "id": "4442a5b9684689c8",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "metrics_calculation_node",
        "func": "const container = global.get(\"container\");\nif (!container || !container.calibration_table || !container.height) {\n  node.error(\"Datos del recipiente incompletos o no definidos\");\n  return null;\n}\n\nconst tabla = container.calibration_table;\nconst volumenMax = tabla[tabla.length - 1].volume;\nconst alturaMax = tabla[tabla.length - 1].height;\n\n// Configuración optimizada para suavizado\nconst TOLERANCIA_NIVEL_CERO = 0.1; // cm\nconst TOLERANCIA_NIVEL = 0.1; // cm\nconst TOLERANCIA_CAUDAL = 0.002; // L/s\nconst INTERVALO_MINIMO = 1; // segundos\nconst HISTERESIS = 0.05; // cm\nconst MIN_MUESTRAS_OPERACION = 5; // Más muestras para mayor estabilidad\nconst FACTOR_SUAVIZADO_PRINCIPAL = 0.4; // Suavizado principal\nconst FACTOR_SUAVIZADO_SECUNDARIO = 0.2; // Suavizado secundario\nconst TAMANO_HISTORIAL = 10; // Mayor historial para media móvil\nconst FACTOR_SUAVIZADO_ETA = 0.7; // Suavizado específico para ETA\n\nconst thresholds = container.thresholds;\n// Obtener los volúmenes correspondientes a los umbrales de altura\nconst h_h_volumen = interpolar(tabla, thresholds.high_high * alturaMax);\nconst l_l_volumen = interpolar(tabla, thresholds.low_low * alturaMax);\n\n// Leer datos del sensor\nlet alturaSensorFondo = container.sensor_height;\nconst distancia = parseFloat(msg.payload.distance_cm);\nconst T = parseFloat(msg.payload.temperature);\nconst ts = Date.now();\n\n// Calcular altura del líquido con filtro de cero\nconst nivel = alturaSensorFondo - distancia;\nlet nivelAjustado = Math.max(0, nivel);\n\n// Aplicar filtro de cero con histéresis\nconst prev = context.get(\"prev\") || {};\nif (nivelAjustado <= TOLERANCIA_NIVEL_CERO) {\n  if ((prev.nivelAjustado || 0) <= TOLERANCIA_NIVEL_CERO + HISTERESIS) {\n    nivelAjustado = 0;\n  }\n}\n\n// Interpolación lineal para volumen (función ya definida correctamente)\nfunction interpolar(tabla, h) {\n  for (let i = 0; i < tabla.length - 1; i++) {\n    let a = tabla[i];\n    let b = tabla[i + 1];\n    if (h >= a.height && h <= b.height) {\n      let f = (h - a.height) / (b.height - a.height);\n      return a.volume + f * (b.volume - a.volume);\n    }\n  }\n  return h <= tabla[0].height\n    ? tabla[0].volume\n    : tabla[tabla.length - 1].volume;\n}\n\n// Volumen corregido por temperatura\nconst beta = 0.000214;\nconst tRef = 20;\nconst V0 = interpolar(tabla, nivelAjustado);\nlet Vadj = V0 * (1 + beta * (T - tRef));\nVadj = Math.max(0, Math.min(Vadj, volumenMax));\n\nif (nivelAjustado === 0) Vadj = 0;\n\n// Calcular diferencias\nconst deltaT = (ts - (prev.ts || ts)) / 1000;\nconst deltaV = Vadj - (prev.V || Vadj);\n\n// Obtener estado anterior\nlet estado = prev.estado || \"reposo\";\nlet Q = prev.Q || 0;\nlet ETA = prev.ETA || 0;\nlet contadorOperacion = prev.contadorOperacion || 0;\nlet historialQ = prev.historialQ || Array(TAMANO_HISTORIAL).fill(0);\n\n// Solo procesar si ha pasado tiempo suficiente\nif (deltaT >= INTERVALO_MINIMO) {\n  // Calcular caudal temporal\n  const Qtemp = deltaT > 0 ? deltaV / deltaT : 0;\n\n  // Actualizar historial de caudales\n  historialQ.shift();\n  historialQ.push(Qtemp);\n\n  // 1. Calcular media móvil del historial\n  const mediaMovil =\n    historialQ.reduce((sum, val) => sum + val, 0) / historialQ.length;\n\n  // 2. Aplicar doble suavizado exponencial\n  const Qfiltrado1 =\n    FACTOR_SUAVIZADO_PRINCIPAL * Qtemp +\n    (1 - FACTOR_SUAVIZADO_PRINCIPAL) * (prev.Q || 0);\n  const Qfiltrado2 =\n    FACTOR_SUAVIZADO_SECUNDARIO * mediaMovil +\n    (1 - FACTOR_SUAVIZADO_SECUNDARIO) * Qfiltrado1;\n\n  // 3. Combinación ponderada de ambos métodos\n  const Qfiltrado = 0.7 * Qfiltrado2 + 0.3 * mediaMovil;\n\n  // Detección de operación con umbral más estable\n  const umbralOperacion = TOLERANCIA_CAUDAL * 1.5;\n  if (Math.abs(Qfiltrado) > umbralOperacion) {\n    contadorOperacion = Math.min(\n      contadorOperacion + 1,\n      MIN_MUESTRAS_OPERACION * 2\n    );\n  } else {\n    contadorOperacion = Math.max(contadorOperacion - 1, 0);\n  }\n\n  // Solo cambiar estado si tenemos suficiente confianza\n  if (contadorOperacion >= MIN_MUESTRAS_OPERACION) {\n    Q = Qfiltrado;\n    estado =\n      Q < -TOLERANCIA_CAUDAL\n        ? \"vaciado\"\n        : Q > TOLERANCIA_CAUDAL\n        ? \"llenado\"\n        : \"reposo\";\n\n    // Cálculo suavizado del ETA con los umbrales correctos\n    if (Math.abs(Q) > TOLERANCIA_CAUDAL * 2 && isFinite(Q)) {\n      if (estado === \"llenado\") {\n        if (Vadj >= h_h_volumen) {\n          ETA = 0; // Ya llegamos al umbral high_high\n        } else {\n          const rawETA = (h_h_volumen - Vadj) / Q;\n          ETA = prev.ETA\n            ? FACTOR_SUAVIZADO_ETA * rawETA +\n              (1 - FACTOR_SUAVIZADO_ETA) * prev.ETA\n            : rawETA;\n        }\n      } else if (estado === \"vaciado\") {\n        if (Vadj <= l_l_volumen) {\n          ETA = 0; // Ya llegamos al umbral low_low\n        } else {\n          const rawETA = (Vadj - l_l_volumen) / Math.abs(Q);\n          ETA = prev.ETA\n            ? FACTOR_SUAVIZADO_ETA * rawETA +\n              (1 - FACTOR_SUAVIZADO_ETA) * prev.ETA\n            : rawETA;\n        }\n      }\n    } else {\n      ETA = prev.ETA || 0; // Mantener último ETA válido\n    }\n  } else if (contadorOperacion === 0) {\n    estado = \"reposo\";\n    Q = 0;\n    // Reducir ETA gradualmente en lugar de resetearlo\n    ETA = prev.ETA ? prev.ETA * 0.9 : 0;\n  }\n}\n\n// Resto del código permanece igual...\n\n// Guardar estado para próxima iteración\ncontext.set(\"prev\", {\n  ts: ts,\n  V: Vadj,\n  nivelAjustado: nivelAjustado,\n  estado: estado,\n  Q: Q,\n  ETA: ETA,\n  contadorOperacion: contadorOperacion,\n  historialQ: historialQ,\n});\n\n// Función para formatear valores\nfunction formatValue(value, decimals) {\n  return Math.abs(value) < Math.pow(10, -decimals) ? 0 : value;\n}\n\n// Datos de depuración\nmsg.debug = {\n  deltaT: deltaT.toFixed(2),\n  deltaV: deltaV.toFixed(4),\n  Qtemp: (deltaT > 0 ? deltaV / deltaT : 0).toFixed(4),\n  volumen: Vadj.toFixed(4),\n  nivel: nivelAjustado.toFixed(2),\n  media_movil: (\n    historialQ.reduce((sum, val) => sum + val, 0) / historialQ.length\n  ).toFixed(4),\n  estado: estado,\n  contador: contadorOperacion,\n};\n\n// Salida final con mejor formato\nmsg.payload = {\n  id: container.id,\n  nivel_cm: formatValue(nivelAjustado, 1).toFixed(1),\n  temperatura_c: T.toFixed(1),\n  volumen_L: formatValue(Vadj, 1).toFixed(1),\n  caudal_Lps: estado !== \"reposo\" ? formatValue(Q, 3).toFixed(3) : \"0.000\",\n  ETA_segundos: estado !== \"reposo\" ? Math.max(0, Math.round(ETA)) : \"0\",\n  timestamp: msg.payload.timestamp || new Date(ts).toISOString(),\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 240,
        "wires": [
            [
                "438a869b8839a6a5",
                "29b60d2186a5dcd3"
            ]
        ]
    },
    {
        "id": "a2ca3aa4bf5af3f9",
        "type": "exec",
        "z": "f8bcc2348cc2da98",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "data_acquisition",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "73b4a99cdca6df2b"
            ],
            [],
            []
        ]
    },
    {
        "id": "73b4a99cdca6df2b",
        "type": "json",
        "z": "f8bcc2348cc2da98",
        "name": "Parsear JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 580,
        "y": 240,
        "wires": [
            [
                "e4510b05f551120c"
            ]
        ]
    },
    {
        "id": "438a869b8839a6a5",
        "type": "debug",
        "z": "f8bcc2348cc2da98",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 200,
        "wires": []
    },
    {
        "id": "fe10fa0893c10a83",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "92e4a7fb71d263be"
            ]
        ]
    },
    {
        "id": "e4510b05f551120c",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "smooth",
        "func": "// Configuración del filtro\nconst HISTORICO_SIZE = 7;  // Tamaño del histórico para mediana\nconst ALPHA = 0.3;         // Factor de suavizado exponencial (0.1 a 0.5)\n\n// Inicialización\nconst historico = flow.get(\"historico_distancia\") || [];\nconst last_smoothed = flow.get(\"last_smoothed\") || null;\n\n// Validación básica (evita NaN o valores absurdos)\nif (typeof msg.payload.distance_cm !== \"number\" || msg.payload.distance_cm <= 0 || msg.payload.distance_cm > 500) {\n    node.warn(`Valor inválido descartado: ${msg.payload.distance_cm}`);\n    return null;  // Descarta el mensaje\n}\n\n// 1. Añadir al histórico y aplicar filtro de mediana\nhistorico.push(msg.payload.distance_cm);\nif (historico.length > HISTORICO_SIZE) historico.shift();\n\nconst mediana = [...historico].sort((a, b) => a - b)[Math.floor(historico.length / 2)];\n\n// 2. Suavizado exponencial\nconst smoothed = last_smoothed !== null\n    ? ALPHA * mediana + (1 - ALPHA) * last_smoothed\n    : mediana;\n\n// Guardar estado para próximo mensaje\nflow.set(\"historico_distancia\", historico);\nflow.set(\"last_smoothed\", smoothed);\n\n// Actualizar el mensaje con el valor filtrado\nmsg.payload.distance_cm = smoothed.toFixed(1);\nmsg.payload.temperature = msg.payload.temperature;  // Mantener temperatura original\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            [
                "4442a5b9684689c8",
                "5330160ce694669f"
            ]
        ]
    },
    {
        "id": "2fabe9c6227edaff",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "function 1",
        "func": "let container = global.get(\"container\");\nlet height = container.sensor_height;\n\nmsg.payload = `/home/simonll4/python/.venv/bin/python /home/simonll4/python/data_acquisition.py --height ${height}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 260,
        "wires": [
            [
                "a2ca3aa4bf5af3f9"
            ]
        ]
    },
    {
        "id": "3968f56b9b101310",
        "type": "link in",
        "z": "f8bcc2348cc2da98",
        "name": "link in 4",
        "links": [
            "38bf80c232b03b6f"
        ],
        "x": 165,
        "y": 60,
        "wires": [
            [
                "92e4a7fb71d263be"
            ]
        ]
    },
    {
        "id": "f4b72a5603ef43f9",
        "type": "mqtt out",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "topic": "influx/tank/measures",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5adc8ec081586556",
        "x": 240,
        "y": 340,
        "wires": []
    },
    {
        "id": "6c16428ebec17b7b",
        "type": "debug",
        "z": "f8bcc2348cc2da98",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 60,
        "wires": []
    },
    {
        "id": "46991ee5dd19d7fd",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "notification_manager",
        "func": "// Configuración de notificaciones (puede ir en context o flow)\nconst configNotificaciones = {\n    notificarBajo: true,\n    notificarBajoBajo: true,\n    notificarAlto: true,\n    notificarAltoAlto: true,\n    notificarRecuperacion: true\n};\n\n// Obtener datos del mensaje\nconst { estado_actual, estado_anterior, requiere_notificacion, mensaje, temperatura, id, nivel } = msg.payload;\n\n// Si no requiere notificación, termina el flujo (no envía nada)\nif (!requiere_notificacion) {\n    return null;\n}\n\n// Verificar si debemos notificar según configuración\nlet enviarEmail = false;\n\nswitch (estado_actual) {\n    case \"Bajo-Bajo\":\n        enviarEmail = configNotificaciones.notificarBajoBajo;\n        break;\n    case \"Bajo\":\n        enviarEmail = configNotificaciones.notificarBajo;\n        break;\n    case \"Alto\":\n        enviarEmail = configNotificaciones.notificarAlto;\n        break;\n    case \"Alto-Alto\":\n        enviarEmail = configNotificaciones.notificarAltoAlto;\n        break;\n    case \"Normal\":\n        enviarEmail = configNotificaciones.notificarRecuperacion;\n        break;\n}\n\n// Si hay que enviar email, preparar el mensaje\nif (enviarEmail) {\n    msg.payload = {\n        id: id,\n        estado_actual: estado_actual,\n        nivel: nivel,\n        asunto: `Alarma de Nivel: ${estado_actual}`,\n        cuerpo: mensaje,\n        prioridad: estado_actual.includes(\"-\") ? \"alta\" : \"media\",\n        temperatura: temperatura\n    };\n    return msg;\n}\n\n// Si no hay que enviar email, no retorna nada (flujo termina aquí)\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 400,
        "wires": [
            [
                "d9d3efd5c2002a17",
                "d9f9e6585b981604"
            ]
        ]
    },
    {
        "id": "29b60d2186a5dcd3",
        "type": "link out",
        "z": "f8bcc2348cc2da98",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "aacf1394b1db87f8"
        ],
        "x": 1175,
        "y": 240,
        "wires": []
    },
    {
        "id": "aacf1394b1db87f8",
        "type": "link in",
        "z": "f8bcc2348cc2da98",
        "name": "link in 5",
        "links": [
            "29b60d2186a5dcd3"
        ],
        "x": 45,
        "y": 400,
        "wires": [
            [
                "f4b72a5603ef43f9",
                "ba7d46ce7f9580b3"
            ]
        ]
    },
    {
        "id": "d9d3efd5c2002a17",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "mail_formatter",
        "func": "// Entrada real del nodo de email\nlet asunto = msg.payload.asunto || \"\";\nlet cuerpo = msg.payload.cuerpo || \"\";\nlet prioridad = msg.payload.prioridad || \"media\"; // Podés ajustar esto desde lógica externa si querés\nlet temperatura = msg.payload.temperatura || \"Desconocida\";\nlet id = msg.payload.id || \"Desconocido\";\nlet nivel = msg.payload.nivel || \"Desconocido\";\n\n// Íconos y títulos por tipo\nlet tipo = prioridad === \"alta\" ? \"alta\" : prioridad === \"media\" ? \"media\" : \"baja\";\nlet icono = tipo === \"alta\" ? \"🔥\" : tipo === \"media\" ? \"⚠️\" : \"✅\";\nlet tituloTipo = tipo === \"alta\" ? \"ALARMA CRÍTICA\" : tipo === \"media\" ? \"ALERTA\" : \"NOTIFICACIÓN\";\nlet temperaturaIcono = temperatura > 30 ? \"🔥\" : temperatura > 20 ? \"⚠️\" : \"✅\";\nlet idIcono = id === \"Desconocido\" ? \"🔍\" : \"🔍\";\n\n\n// Fecha formateada\nlet fechaHora = new Date().toLocaleString('es-ES');\n\n// Detectar si es resolución\nlet esResuelta = /RESUELT[AO]/i.test(cuerpo);\n\n// Extraer título\nlet titulo = \"SIN TÍTULO\";\n\n// Tratar de extraer título desde el asunto\nlet matchTitulo = asunto.match(/: (.+?)( - |$)/);\nif (matchTitulo) {\n  titulo = matchTitulo[1].trim();\n}\n\n// Buscar nivel dentro del cuerpo\n/* let matchNivel = cuerpo.match(/Nivel\\s+([\\d.,]+)\\s?cm/i);\nif (matchNivel) {\n  nivel = `${matchNivel[1]} cm`;\n} else {\n  let nivelSolo = cuerpo.match(/^\\s*([\\d.]+)\\s*cm$/m);\n  if (nivelSolo) nivel = `${nivelSolo[1]} cm`;\n}\n */\n\n\n// Elegí color según el tipo\nlet colorPrincipal = tipo === \"alta\" ? \"#d9534f\" : tipo === \"media\" ? \"#f0ad4e\" : \"#5cb85c\";\n\n// Plantilla HTML\nlet html = `\n<html>\n  <body style=\"font-family: Arial, sans-serif; margin: 0; padding: 0; background: #f9f9f9;\">\n    <div style=\"max-width: 600px; margin: auto; background: white; border: 1px solid #ddd; border-radius: 8px; overflow: hidden;\">\n      \n      <!-- Encabezado -->\n      <div style=\"background: ${colorPrincipal}; color: white; padding: 20px; text-align: center;\">\n        <img src=\"https://cdn-icons-png.flaticon.com/512/9170/9170553.png\" alt=\"Logo\" style=\"height: 100px; margin-bottom: 10px;\" />\n        <h1 style=\"margin: 0;\">${tituloTipo}: ${titulo.toUpperCase()}</h1>\n      </div>\n      \n      <!-- Contenido principal -->\n      <div style=\"padding: 20px; color: #333;\">\n        <p><strong>🪣 ID Contenedor:</strong> ${idIcono} ${id}</p>\n        <p><strong>📅 Fecha:</strong> ${fechaHora}</p>\n        <p><strong>📌 Estado:</strong> ${esResuelta ? '<span style=\"color: green;\">RESUELTO</span>' : '<span style=\"color: red;\">EN ALERTA</span>'}</p>\n        <p><strong>📏 Medición actual:</strong> ${nivel}</p>\n        <p><strong>🌡️ Temperatura actual:</strong> ${temperaturaIcono} ${temperatura}°C</p>\n\n        <p><strong>🛠 Acciones recomendadas:</strong></p>\n        <ul>\n          ${esResuelta\n    ? \"<li>Condición normal restablecida</li>\"\n    : tipo === \"alta\"\n      ? \"<li>Verificación inmediata requerida</li><li>Notificar al personal responsable</li>\"\n      : \"<li>Monitorear la evolución</li><li>Registrar en bitácora</li>\"\n  }\n        </ul>\n      </div>\n\n      <!-- Pie -->\n      <div style=\"background: #f0f0f0; padding: 15px; text-align: center; font-size: 12px; color: #666;\">\n        Sistema Automatizado de Monitoreo<br>\n        Arquitectura Orientada a Servicios - Proyecto Final\n      </div>\n    </div>\n  </body>\n</html>\n`;\n\n// Asignar al mensaje\nmsg.topic = `[MONITOR] ${tituloTipo}: ${titulo} - ${esResuelta ? \"RESUELTO\" : \"ALERTA\"}`;\nmsg.payload = html;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 400,
        "wires": [
            [
                "9ca5e92782927aa2"
            ]
        ]
    },
    {
        "id": "cb11702ac0d92712",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "inject mail",
        "props": [
            {
                "p": "payload.asunto",
                "v": "⚠️ ALERTA: TANQUE PRINCIPAL ⚠️ ... 📏 Medición actual: 85.3 cm",
                "vt": "str"
            },
            {
                "p": "payload.cuerpo",
                "v": "ALARMA Bajo: Nivel 85.3 cm",
                "vt": "str"
            },
            {
                "p": "payload.prioridad",
                "v": "media",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 760,
        "y": 360,
        "wires": [
            [
                "d9d3efd5c2002a17"
            ]
        ]
    },
    {
        "id": "d9f9e6585b981604",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "mqtt_formatter",
        "func": "// Extraer datos del payload\nlet estado = msg.payload.estado_actual || \"\";\nlet nivel = msg.payload.nivel || \"Desconocido\";\nlet temperatura = msg.payload.temperatura || \"Desconocida\";\nlet id = msg.payload.id || \"Desconocido\";\n\n// Mapear estado a abreviatura\nlet estadoAbrev = \"\";\nswitch (estado) {\n    case \"Bajo-Bajo\":\n        estadoAbrev = \"BB\";\n        break;\n    case \"Bajo\":\n        estadoAbrev = \"B\";\n        break;\n    case \"Alto\":\n        estadoAbrev = \"A\";\n        break;\n    case \"Alto-Alto\":\n        estadoAbrev = \"AA\";\n        break;\n    default:\n        estadoAbrev = \"N\"; // N para Normal o desconocido\n}\n\n// Formatear mensaje MQTT como JSON\nlet mensaje = {\n    estado: estadoAbrev,\n    nivel: nivel,\n    temperatura: temperatura,\n    id: id\n};\n\nmsg.payload = JSON.stringify(mensaje);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            [
                "2a96f1248117e7f3"
            ]
        ]
    },
    {
        "id": "2a96f1248117e7f3",
        "type": "mqtt out",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "topic": "alarms",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5adc8ec081586556",
        "x": 1110,
        "y": 480,
        "wires": []
    },
    {
        "id": "73c21850a86b846b",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "inject maqtt",
        "props": [
            {
                "p": "payload.estado_actual",
                "v": "Bajo",
                "vt": "str"
            },
            {
                "p": "payload.nivel",
                "v": "24",
                "vt": "str"
            },
            {
                "p": "payload.temperatura",
                "v": "25",
                "vt": "str"
            },
            {
                "p": "payload.id",
                "v": "container_001",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 750,
        "y": 520,
        "wires": [
            [
                "d9f9e6585b981604"
            ]
        ]
    },
    {
        "id": "1325ca38334cb637",
        "type": "exec",
        "z": "f8bcc2348cc2da98",
        "command": "python3 /home/simonll4/python/relay_channel_20.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Start Fill",
        "x": 900,
        "y": 880,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c0a942da02cce0c0",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 820,
        "wires": [
            [
                "54b1ee770c722be6"
            ]
        ]
    },
    {
        "id": "f28e3bc342b5446a",
        "type": "exec",
        "z": "f8bcc2348cc2da98",
        "command": "kill -TERM $(cat /tmp/relay_channel_20.pid)",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Stop Fill Pump ",
        "x": 920,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f59d36d0daec3faa",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 600,
        "wires": [
            [
                "f28e3bc342b5446a"
            ]
        ]
    },
    {
        "id": "ad4c77dbc1291da5",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "Critical Alarm Gate",
        "func": "const estado = msg.payload?.estado_actual;\nconst notificar = msg.payload?.requiere_notificacion;\n\n// Verificamos si es una alarma crítica y requiere notificación\nif ((estado === \"Alto-Alto\" || estado === \"Bajo-Bajo\") && notificar === true) {\n    msg.payload = {\n        alarma_critica: true,\n        estado: estado,\n        nivel: msg.payload.nivel,\n        mensaje: msg.payload.mensaje\n    };\n    return msg; // Enviar señal al siguiente nodo\n}\n\n// No cumple condiciones: no hacer nada\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 540,
        "wires": [
            [
                "f28e3bc342b5446a",
                "464877eb7d4f4957"
            ]
        ]
    },
    {
        "id": "61f276fb98184f6c",
        "type": "exec",
        "z": "f8bcc2348cc2da98",
        "command": "python3 /home/simonll4/python/relay_channel_21.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Start Drain",
        "x": 910,
        "y": 1020,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "54b1ee770c722be6",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "ignore_high_high_alarm",
        "func": "\nconst estado = flow.get(\"alarma_actual\")\n\n// Si es AA (Alto-Alto), no enviar pulso\nif (estado === \"Alto-Alto\") {\n    return null;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 880,
        "wires": [
            [
                "1325ca38334cb637"
            ]
        ]
    },
    {
        "id": "8709687f1f3787d2",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "ignore_low_low_alarm",
        "func": "const estado = flow.get(\"alarma_actual\")\n\nif (estado === \"Bajo-Bajo\") {\n    return null;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1020,
        "wires": [
            [
                "61f276fb98184f6c"
            ]
        ]
    },
    {
        "id": "f56d7206911acf1e",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 960,
        "wires": [
            [
                "8709687f1f3787d2"
            ]
        ]
    },
    {
        "id": "495b6f31369a9d81",
        "type": "mqtt in",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "topic": "/startf",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5adc8ec081586556",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 880,
        "wires": [
            [
                "54b1ee770c722be6"
            ]
        ]
    },
    {
        "id": "82ac2f0d617f7cd7",
        "type": "mqtt in",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "topic": "/startd",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5adc8ec081586556",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "8709687f1f3787d2"
            ]
        ]
    },
    {
        "id": "bae84f7ea46d6412",
        "type": "mqtt in",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "topic": "/stopfp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5adc8ec081586556",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 640,
        "wires": [
            [
                "f28e3bc342b5446a"
            ]
        ]
    },
    {
        "id": "0a8502a63fd5529f",
        "type": "mqtt in",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "topic": "/stopdp",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "5adc8ec081586556",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 740,
        "wires": [
            [
                "464877eb7d4f4957"
            ]
        ]
    },
    {
        "id": "464877eb7d4f4957",
        "type": "exec",
        "z": "f8bcc2348cc2da98",
        "command": "kill -TERM $(cat /tmp/relay_channel_21.pid)",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Stop Drain Pump",
        "x": 930,
        "y": 740,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "115a95fef9a87c60",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 460,
        "y": 700,
        "wires": [
            [
                "464877eb7d4f4957"
            ]
        ]
    },
    {
        "id": "ba7d46ce7f9580b3",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "thresholds_check_node",
        "func": "// 1. Obtener configuración del contenedor\nconst container = global.get(\"container\");\nif (!container?.thresholds) {\n  node.error(\"No se encontraron umbrales en el container\");\n  return null;\n}\n\n// Obtener el id del contenedor\nlet id = container.id;\n\n// 2. Calcular umbrales absolutos (solo una vez)\nlet ctx = flow.get(\"nivelContex\") || {};\nif (!ctx.umbrales) {\n  ctx.umbrales = {\n    bajo_bajo: container.height * container.thresholds.low_low,\n    bajo: container.height * container.thresholds.low,\n    alto: container.height * container.thresholds.high,\n    alto_alto: container.height * container.thresholds.high_high,\n  };\n}\n\n// 3. Obtener y validar medición actual\nlet nivel = msg.payload.nivel_cm;\n\nif (typeof nivel !== \"number\") {\n  nivel = parseFloat(nivel);\n  if (isNaN(nivel)) {\n    node.error(\"El valor de nivel no es un número válido\", msg);\n    return null;\n  }\n}\n\nconst lastAlarm = ctx.lastAlarm || null;\nconst um = ctx.umbrales;\n\n// Obtener temperatura actual\nlet temperatura = msg.payload.temperatura_c;\n\n// Asegurarnos que temperatura es un número\nif (typeof temperatura !== 'number') {\n  temperatura = parseFloat(temperatura);\n  if (isNaN(temperatura)) {\n    node.error(\"El valor de temperatura no es un número válido\", msg);\n    return null;\n  }\n}\n\n// 4. Determinar estado actual\nlet estadoActual = \"Normal\";\nif (nivel <= um.bajo_bajo) estadoActual = \"Bajo-Bajo\";\nelse if (nivel <= um.bajo) estadoActual = \"Bajo\";\nelse if (nivel >= um.alto_alto) estadoActual = \"Alto-Alto\";\nelse if (nivel >= um.alto) estadoActual = \"Alto\";\n\n// 5. Determinar dirección del cambio (carga o descarga)\nlet tendencia = null;\nif (ctx.ultimoNivel !== undefined) {\n  if (nivel > ctx.ultimoNivel) tendencia = \"carga\";\n  else if (nivel < ctx.ultimoNivel) tendencia = \"descarga\";\n}\n\n// 6. Lógica de notificación\nlet notificar = false;\nlet mensaje = \"\";\n\nif (estadoActual !== lastAlarm) {\n  // Cambió de estado\n  if (estadoActual === \"Normal\" && lastAlarm !== null) {\n    // Volvió a normal\n    notificar = true;\n    mensaje = `ALARMA RESUELTA: ${lastAlarm} -> Normal (${nivel.toFixed(\n      2\n    )} cm)`;\n    ctx.lastAlarm = null;\n  } else if (estadoActual !== \"Normal\") {\n    // Está en estado de alarma\n    if (lastAlarm === null) {\n      // Primera alarma\n      notificar = true;\n      mensaje = `ALARMA ${estadoActual}: Nivel ${nivel.toFixed(2)} cm`;\n      ctx.lastAlarm = estadoActual;\n    } else if (tendencia === \"descarga\") {\n      // En descarga, siempre reportar cambio a estado más crítico o menos crítico\n      notificar = true;\n      mensaje = `ALARMA ${estadoActual}: Nivel ${nivel.toFixed(2)} cm`;\n      ctx.lastAlarm = estadoActual;\n    } else if (tendencia === \"carga\") {\n      // En carga, solo reportar si se pasa a un estado más crítico (de B a BB por ejemplo)\n      const niveles = [\"Normal\", \"Bajo\", \"Bajo-Bajo\", \"Alto\", \"Alto-Alto\"];\n      const severidad = (e) => niveles.indexOf(e);\n      if (severidad(estadoActual) > severidad(lastAlarm)) {\n        notificar = true;\n        mensaje = `ALARMA ${estadoActual}: Nivel ${nivel.toFixed(2)} cm`;\n        ctx.lastAlarm = estadoActual;\n      } // Si baja severidad en carga, no notificar\n    }\n  }\n}\n\n// 7. Guardar contexto y preparar salida\nctx.ultimoNivel = nivel;\nflow.set(\"nivelContex\", ctx);\n\nflow.set(\"alarma_actual\",estadoActual)\n\nmsg.payload = {\n  id: id,\n  nivel: nivel,\n  estado_actual: estadoActual,\n  estado_anterior: lastAlarm,\n  requiere_notificacion: notificar,\n  mensaje: mensaje,\n  umbrales: um, // Para depuración\n  tendencia: tendencia || \"sin cambios\",\n  temperatura: temperatura,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "46991ee5dd19d7fd",
                "ad4c77dbc1291da5"
            ]
        ]
    },
    {
        "id": "5330160ce694669f",
        "type": "debug",
        "z": "f8bcc2348cc2da98",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 300,
        "wires": []
    },
    {
        "id": "5adc8ec081586556",
        "type": "mqtt-broker",
        "name": "BROKER LPN2",
        "broker": "192.168.192.162",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]