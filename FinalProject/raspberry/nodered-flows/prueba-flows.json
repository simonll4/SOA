    [
    {
        "id": "e1b5b3d4.9a8e48",
        "type": "tab",
        "label": "Cámara Raspberry Pi",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e1f5c3b5.0d0c68",
        "type": "tab",
        "label": "LED RGB Control Corregido",
        "disabled": false,
        "info": ""
    },
    {
        "id": "led-pin11",
        "type": "tab",
        "label": "LED Pin 11",
        "disabled": false,
        "info": ""
    },
    {
        "id": "68dbc06e6613ca47",
        "type": "tab",
        "label": "Sensor Temperatura Humedad",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b1b1b1b1.1111a8",
        "type": "tab",
        "label": "Sensor Ultrasónico HC-SR04",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a5c1f8d3.1c5f58",
        "type": "inject",
        "z": "e1b5b3d4.9a8e48",
        "name": "Disparador Manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "c3f8e9d1.8c8a3"
            ]
        ]
    },
    {
        "id": "c3f8e9d1.8c8a3",
        "type": "exec",
        "z": "e1b5b3d4.9a8e48",
        "command": "libcamera-jpeg -o /home/simonll4/fotos/_$(date +%Y%m%d_%H%M%S).jpg --width 1280 --height 720",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capturar Foto",
        "x": 400,
        "y": 160,
        "wires": [
            [
                "d4b2a7c4.8e8a9"
            ],
            [],
            []
        ]
    },
    {
        "id": "d4b2a7c4.8e8a9",
        "type": "debug",
        "z": "e1b5b3d4.9a8e48",
        "name": "Mostrar Resultado",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 160,
        "wires": []
    },
    {
        "id": "2b22b7e431674abd",
        "type": "image viewer",
        "z": "e1b5b3d4.9a8e48",
        "name": "",
        "width": 160,
        "data": "payload",
        "dataType": "msg",
        "active": true,
        "x": 670,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "60b8ab71d0e78108",
        "type": "file in",
        "z": "e1b5b3d4.9a8e48",
        "name": "Leer última foto",
        "filename": "/home/simonll4/fotos/_20250515_034423.jpg",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "2b22b7e431674abd"
            ]
        ]
    },
    {
        "id": "291fd615efc55fef",
        "type": "inject",
        "z": "e1b5b3d4.9a8e48",
        "name": "Disparador Manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "60b8ab71d0e78108"
            ]
        ]
    },
    {
        "id": "a1b3d8e6.1e2ab8",
        "type": "inject",
        "z": "e1f5c3b5.0d0c68",
        "name": "Disparar manualmente",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"r\":255,\"g\":0,\"b\":0}",
        "payloadType": "json",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "c3d5f7e1.2e3d48"
            ]
        ]
    },
    {
        "id": "c3d5f7e1.2e3d48",
        "type": "function",
        "z": "e1f5c3b5.0d0c68",
        "name": "Procesar y Validar RGB",
        "func": "// Asegurar que el mensaje tiene el formato correcto\nif (!msg.payload || typeof msg.payload !== 'object') {\n    msg.payload = {r:0, g:0, b:0};\n    node.warn('Formato inválido, usando valores por defecto');\n}\n\n// Convertir a números y limitar entre 0-255\nconst r = Math.min(255, Math.max(0, parseInt(msg.payload.r) || 0));\nconst g = Math.min(255, Math.max(0, parseInt(msg.payload.g) || 0));\nconst b = Math.min(255, Math.max(0, parseInt(msg.payload.b) || 0));\n\n// Crear mensajes individuales para cada canal\nreturn [\n    {payload: r/255, topic: 'red'},\n    {payload: g/255, topic: 'green'},\n    {payload: b/255, topic: 'blue'}\n];",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "d2f4a6e3.5e8a3"
            ],
            [
                "e4b6c8d5.7a3b78"
            ],
            [
                "f7e8c9d6.4b3c28"
            ]
        ]
    },
    {
        "id": "d2f4a6e3.5e8a3",
        "type": "rpi-gpio out",
        "z": "e1f5c3b5.0d0c68",
        "name": "Canal Rojo",
        "pin": "",
        "set": false,
        "level": "0",
        "freq": "",
        "out": "pwm",
        "bcm": true,
        "x": 710,
        "y": 80,
        "wires": []
    },
    {
        "id": "e4b6c8d5.7a3b78",
        "type": "rpi-gpio out",
        "z": "e1f5c3b5.0d0c68",
        "name": "Canal Verde",
        "pin": "",
        "set": false,
        "level": "0",
        "freq": "",
        "out": "pwm",
        "bcm": true,
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "f7e8c9d6.4b3c28",
        "type": "rpi-gpio out",
        "z": "e1f5c3b5.0d0c68",
        "name": "Canal Azul",
        "pin": "",
        "set": false,
        "level": "0",
        "freq": "",
        "out": "pwm",
        "bcm": true,
        "x": 710,
        "y": 240,
        "wires": []
    },
    {
        "id": "encender",
        "type": "inject",
        "z": "led-pin11",
        "name": "Encender LED",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 220,
        "y": 100,
        "wires": [
            [
                "gpio-17"
            ]
        ]
    },
    {
        "id": "apagar",
        "type": "inject",
        "z": "led-pin11",
        "name": "Apagar LED",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "gpio-17"
            ]
        ]
    },
    {
        "id": "gpio-17",
        "type": "rpi-gpio out",
        "z": "led-pin11",
        "name": "GPIO17 (Pin 11)",
        "pin": "",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 500,
        "y": 140,
        "wires": []
    },
    {
        "id": "8c377de79cf46e94",
        "type": "bme280rpi",
        "z": "68dbc06e6613ca47",
        "name": "",
        "bus": "1",
        "address": "0x76",
        "interval": "10000000",
        "x": 220,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "bc587feba8c26b74",
        "type": "debug",
        "z": "68dbc06e6613ca47",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 220,
        "wires": []
    },
    {
        "id": "a1a1a1a1.111111",
        "type": "inject",
        "z": "b1b1b1b1.1111a8",
        "name": "Temporizador de activación",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "c1c1c1c1.111111"
            ]
        ]
    },
    {
        "id": "c1c1c1c1.111111",
        "type": "function",
        "z": "b1b1b1b1.1111a8",
        "name": "Secuencia de activación",
        "func": "// Set trigger high\ncontext.set('triggerState', 1);\nmsg.payload = 1;\nnode.send([msg, null]);\n\n// Set trigger low after 10 microseconds\nsetTimeout(() => {\n    context.set('triggerState', 0);\n    msg.payload = 0;\n    node.send([null, msg]);\n}, 10);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "d1d1d1d1.111111"
            ],
            [
                "d1d1d1d1.111111"
            ]
        ]
    },
    {
        "id": "d1d1d1d1.111111",
        "type": "rpi-gpio out",
        "z": "b1b1b1b1.1111a8",
        "name": "TRIG",
        "pin": "23",
        "set": "",
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 890,
        "y": 80,
        "wires": []
    },
    {
        "id": "e1e1e1e1.111111",
        "type": "rpi-gpio in",
        "z": "b1b1b1b1.1111a8",
        "name": "ECHO",
        "pin": "24",
        "intype": "tri",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "f1f1f1f1.111111"
            ]
        ]
    },
    {
        "id": "f1f1f1f1.111111",
        "type": "function",
        "z": "b1b1b1b1.1111a8",
        "name": "Calcular distancia",
        "func": "const duration = msg.payload;\nconst distance = duration * 17150 / 1000000;\n\nmsg.payload = {\n    distance: distance.toFixed(2),\n    units: \"cm\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "g1g1g1g1.111111"
            ]
        ]
    },
    {
        "id": "g1g1g1g1.111111",
        "type": "debug",
        "z": "b1b1b1b1.1111a8",
        "name": "Mostrar distancia",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 200,
        "wires": []
    }
]