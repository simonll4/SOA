[
    {
        "id": "f8bcc2348cc2da98",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11c2cf4c449f4eb4",
        "type": "inject",
        "z": "f8bcc2348cc2da98",
        "name": "Cargar JSON",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "64a7d90838022226"
            ]
        ]
    },
    {
        "id": "64a7d90838022226",
        "type": "file in",
        "z": "f8bcc2348cc2da98",
        "name": "Leer containers.json",
        "filename": "/home/simonll4/python/containers.json",
        "filenameType": "str",
        "format": "utf8",
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "456a9ed61f3c3a14"
            ]
        ]
    },
    {
        "id": "456a9ed61f3c3a14",
        "type": "json",
        "z": "f8bcc2348cc2da98",
        "name": "Parsear JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 620,
        "y": 140,
        "wires": [
            [
                "969621d97c16058d"
            ]
        ]
    },
    {
        "id": "969621d97c16058d",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "Guardar en global y activar flujo",
        "func": "const container = msg.payload[0];\nglobal.set(\"container\", container);\nreturn { payload: msg.payload };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 140,
        "wires": [
            [
                "c0f13619ce7126fd"
            ]
        ]
    },
    {
        "id": "c0f13619ce7126fd",
        "type": "link out",
        "z": "f8bcc2348cc2da98",
        "name": "Activar flujo sensor",
        "mode": "link",
        "links": [
            "f687ee84718579e1"
        ],
        "x": 1125,
        "y": 140,
        "wires": []
    },
    {
        "id": "f687ee84718579e1",
        "type": "link in",
        "z": "f8bcc2348cc2da98",
        "name": "Sensor - Entrada activación",
        "links": [
            "c0f13619ce7126fd"
        ],
        "x": 55,
        "y": 340,
        "wires": [
            [
                "f92301aee312b47c"
            ]
        ]
    },
    {
        "id": "f92301aee312b47c",
        "type": "exec",
        "z": "f8bcc2348cc2da98",
        "command": "/home/simonll4/python/.venv/bin/python /home/simonll4/python/main.py",
        "addpay": "payload",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Ejecutar sensor HC-SR04",
        "x": 250,
        "y": 340,
        "wires": [
            [
                "238a404850626bc6"
            ],
            [],
            []
        ]
    },
    {
        "id": "1297bbb74d04aeae",
        "type": "debug",
        "z": "f8bcc2348cc2da98",
        "name": "Resultado Final",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "890167617624f1e7",
        "type": "function",
        "z": "f8bcc2348cc2da98",
        "name": "Calcular nivel, volumen, Q, ETA",
        "func": "const container = global.get(\"container\");\nif (!container || !container.calibration_table || !container.height) {\n  node.error(\"Datos del recipiente incompletos o no definidos\");\n  return null;\n}\n\nconst tabla = container.calibration_table;\nconst volumenMax = tabla[tabla.length - 1].volume;\n\n// Leer o definir altura de referencia (sensor al fondo)\nlet alturaSensorFondo = flow.get(\"altura_sensor_fondo\");\nconst distancia = msg.payload.distance_cm;\nconst T = msg.payload.temperature;\nconst ts = Date.now();\n\nif (alturaSensorFondo === null || alturaSensorFondo === undefined) {\n  // Guardar la primera distancia como referencia\n  alturaSensorFondo = distancia;\n  flow.set(\"altura_sensor_fondo\", alturaSensorFondo);\n  node.warn(`Altura de referencia guardada: ${alturaSensorFondo} cm`);\n}\n\n// Calcular altura del líquido (nivel actual)\nconst nivel = alturaSensorFondo - distancia;\nconst nivelAjustado = Math.max(0, nivel);\n\n// Interpolación lineal para obtener volumen\nfunction interpolar(tabla, h) {\n  for (let i = 0; i < tabla.length - 1; i++) {\n    let a = tabla[i];\n    let b = tabla[i + 1];\n    if (h >= a.height && h <= b.height) {\n      let f = (h - a.height) / (b.height - a.height);\n      return a.volume + f * (b.volume - a.volume);\n    }\n  }\n  if (h <= tabla[0].height) return tabla[0].volume;\n  if (h >= tabla[tabla.length - 1].height)\n    return tabla[tabla.length - 1].volume;\n  return 0;\n}\n\n// Volumen corregido por temperatura\nconst beta = 0.000214;\nconst tRef = 20;\nconst V0 = interpolar(tabla, nivelAjustado);\nlet Vadj = V0 * (1 + beta * (T - tRef));\nVadj = Math.max(0, Math.min(Vadj, volumenMax));\n\n// Calcular caudal y ETA\nconst prev = context.get(\"prev\") || {};\nconst deltaT = (ts - (prev.ts || ts)) / 1000;\nconst deltaV = Vadj - (prev.V || Vadj);\nconst Q = deltaT > 0 ? deltaV / deltaT : 0;\n\nlet ETA = 0;\nif (Math.abs(Q) > 0.001) {\n  ETA = Q > 0 ? (volumenMax - Vadj) / Q : Vadj / Math.abs(Q);\n}\n\ncontext.set(\"prev\", { ts: ts, V: Vadj });\n\n// Porcentaje de llenado\nconst porcentaje = (Vadj / volumenMax) * 100;\n\n// Salida final\nmsg.payload = {\n  id: container.id,\n  nivel_cm: nivelAjustado.toFixed(2),\n  temperatura_c: T,\n  volumen_L: Vadj.toFixed(2),\n  porcentaje_llenado: porcentaje.toFixed(1),\n  caudal_Lps: Q.toFixed(3),\n  ETA_segundos: ETA.toFixed(1),\n  timestamp: msg.payload.timestamp\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 340,
        "wires": [
            [
                "1297bbb74d04aeae"
            ]
        ]
    },
    {
        "id": "238a404850626bc6",
        "type": "json",
        "z": "f8bcc2348cc2da98",
        "name": "Parsear JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 520,
        "y": 340,
        "wires": [
            [
                "890167617624f1e7"
            ]
        ]
    }
]